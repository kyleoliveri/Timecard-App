{"ast":null,"code":"import _slicedToArray from \"/Users/KyleOliveri/Desktop/uclaFullStackCoding/Homework/Group-Project-3/timecard-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport const useHttp = (url, method, body, headers, dependencies) => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fetchedData = _useState4[0],\n        setFetchedData = _useState4[1];\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (method === 'GET') {\n      fetch(url, {\n        method: method,\n        headers: headers\n      }).then(r => {\n        if (!r.ok) {\n          throw new Error('failed to fetch');\n        }\n\n        return r.json();\n      }).then(d => {\n        console.log(d);\n        setIsLoading(false);\n        setFetchedData(d);\n      }).catch(e => {\n        console.log(e);\n        setIsLoading(false);\n      });\n    } else {\n      fetch(url, {\n        method: method,\n        body: body,\n        headers: headers\n      }).then(r => {\n        if (!r.ok) {\n          throw new Error('failed to fetch');\n        }\n\n        return r.json();\n      }).then(d => {\n        console.log(d);\n        setIsLoading(false);\n        setFetchedData(d);\n      }).catch(e => {\n        console.log(e);\n        setIsLoading(false);\n      });\n    }\n  }, dependencies);\n  return [isLoading, fetchedData];\n};","map":{"version":3,"sources":["/Users/KyleOliveri/Desktop/uclaFullStackCoding/Homework/Group-Project-3/timecard-app/client/src/components/Hooks/Fetch.js"],"names":["useState","useEffect","useHttp","url","method","body","headers","dependencies","isLoading","setIsLoading","fetchedData","setFetchedData","fetch","then","r","ok","Error","json","d","console","log","catch","e"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,YAA7B,KAA8C;AAAA,oBAC/BP,QAAQ,CAAC,IAAD,CADuB;AAAA;AAAA,QAC1DQ,SAD0D;AAAA,QAC/CC,YAD+C;;AAAA,qBAE3BT,QAAQ,CAAC,EAAD,CAFmB;AAAA;AAAA,QAE1DU,WAF0D;AAAA,QAE7CC,cAF6C;;AAIjEV,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAGL,MAAM,KAAK,KAAd,EAAoB;AAChBQ,MAAAA,KAAK,CAACT,GAAD,EAAM;AACPC,QAAAA,MAAM,EAAEA,MADD;AAEPE,QAAAA,OAAO,EAAEA;AAFF,OAAN,CAAL,CAGGO,IAHH,CAGSC,CAAC,IAAI;AACV,YAAG,CAACA,CAAC,CAACC,EAAN,EAAS;AACL,gBAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,eAAOF,CAAC,CAACG,IAAF,EAAP;AACH,OARD,EAQGJ,IARH,CAQSK,CAAC,IAAI;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAT,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,cAAc,CAACO,CAAD,CAAd;AACH,OAZD,EAYGG,KAZH,CAYUC,CAAC,IAAI;AACXH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAfD;AAgBH,KAjBD,MAiBO;AACHG,MAAAA,KAAK,CAACT,GAAD,EAAM;AACPC,QAAAA,MAAM,EAAEA,MADD;AAEPC,QAAAA,IAAI,EAAEA,IAFC;AAGPC,QAAAA,OAAO,EAAEA;AAHF,OAAN,CAAL,CAIGO,IAJH,CAISC,CAAC,IAAI;AACV,YAAG,CAACA,CAAC,CAACC,EAAN,EAAS;AACL,gBAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,eAAOF,CAAC,CAACG,IAAF,EAAP;AACH,OATD,EASGJ,IATH,CASSK,CAAC,IAAI;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAT,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,cAAc,CAACO,CAAD,CAAd;AACH,OAbD,EAaGG,KAbH,CAaUC,CAAC,IAAI;AACXH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAhBD;AAiBH;AACJ,GAvCQ,EAuCNF,YAvCM,CAAT;AAwCA,SAAO,CAACC,SAAD,EAAYE,WAAZ,CAAP;AACH,CA7CM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useHttp = (url, method, body, headers, dependencies) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [fetchedData, setFetchedData] = useState({});\n\n    useEffect( () => {\n        setIsLoading(true);\n\n        if(method === 'GET'){\n            fetch(url, {\n                method: method,\n                headers: headers\n            }).then( r => {\n                if(!r.ok){\n                    throw new Error('failed to fetch');\n                }\n                return r.json();\n            }).then( d => {\n                console.log(d)\n                setIsLoading(false);\n                setFetchedData(d);\n            }).catch( e => {\n                console.log(e);\n                setIsLoading(false);\n            })\n        } else {\n            fetch(url, {\n                method: method,\n                body: body,\n                headers: headers\n            }).then( r => {\n                if(!r.ok){\n                    throw new Error('failed to fetch');\n                }\n                return r.json();\n            }).then( d => {\n                console.log(d)\n                setIsLoading(false);\n                setFetchedData(d);\n            }).catch( e => {\n                console.log(e);\n                setIsLoading(false);\n            })\n        }\n    }, dependencies )\n    return [isLoading, fetchedData];\n}"]},"metadata":{},"sourceType":"module"}